name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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

          certificate-password: 111111
          
          provisioning-profile-base64: 


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/milya.ipa"
          APPLE_ID: "suncongliang@paymenttech.shop"
          APP_SPECIFIC_PASSWORD: "rfhs-msky-gvdo-kwfq"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
